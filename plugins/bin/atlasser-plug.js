// Generated by Haxe 4.0.5
var $hx_exports = typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this;
$hx_exports["hide"] = $hx_exports["hide"] || {};
var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this;
var $hxClasses = $hxClasses || {},$estr = function() { return js.Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AtlasEditor = $hxClasses["AtlasEditor"] = function(state) {
	this.undoChain = false;
	this.zooms = [0.2,0.225,0.25,0.275,0.3,0.325,0.35,0.375,0.4,0.45,0.5,0.55,0.60,0.65,0.7,0.8,0.9,1,1.1,1.2,1.4,1.6,1.8,2,2.5,3,3.5,4,5,6,7,8,10,12,14,16,20,24,30];
	hide.view.FileView.call(this,state);
};
AtlasEditor.__name__ = "AtlasEditor";
AtlasEditor.__super__ = hide.view.FileView;
AtlasEditor.prototype = $extend(hide.view.FileView.prototype,{
	get_anim: function() {
		var key = this.current.id;
		var _this = this.atlas.anims;
		var a = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(a.id != this.current.id) {
			a.id = this.current.id;
		}
		if(a._id == null) {
			a._id = this.current.id;
		}
		return a;
	}
	,get_currZoom: function() {
		return this.zooms[this.zoom];
	}
	,onDisplay: function() {
		this.zoom = this.zooms.indexOf(1.);
		hide.view.FileView.prototype.onDisplay.call(this);
		this.element.html("\r\n      <div class=\"flex\" >\r\n        <div class=\"heaps-scene\" tabindex=\"1\"></div>\r\n        <div id=\"rightPanel\" class=\"tabs\"></div>\r\n      </div>\r\n    ");
		this.props = new hide.comp.PropsEditor(this.undo,null,this.element.find("#rightPanel"));
		this.props.saveDisplayKey = "cherry/atlasEditor";
		this.manageCtx = { backgroundColor : 0, checker : true, whiteChecker : false, checkerSize : 8};
		this.sprites = new haxe.ds.ObjectMap();
		this.scene = new hide.comp.Scene(false,this.get_config(),null,this.element.find(".heaps-scene"));
		this.scene.onResize = $bind(this,this.onResize);
		this.scene.onUpdate = $bind(this,this.onUpdate);
		this.scene.onReady = $bind(this,this.init);
	}
	,onResize: function() {
		if(this.scaler != null) {
			this.tool.resize();
			var _this = this.scaler;
			var x = this.scene.get_width() >> 1;
			var y = this.scene.get_height() >> 1;
			_this.posChanged = true;
			_this.x = x;
			_this.posChanged = true;
			_this.y = y;
			this.canvas.width = this.scene.get_width();
			this.canvas.height = this.scene.get_height();
			this.scaler.syncPos();
			if(this.tex != null) {
				this.tex.syncPos();
				var s = this.sprites.iterator();
				while(s.hasNext()) {
					var s1 = s.next();
					s1.resync(true);
				}
			}
		}
	}
	,onUpdate: function(dt) {
		if(this.current != null) {
			if(hxd.Key.isReleased(46)) {
				this.delete(this.current);
			}
		}
		if(this.tool != null) {
			this.tool.set_visible(this.toolAction == cherry.plugins.atl.CurrentAction.None && hxd.Key.isDown(16) || this.toolAction == cherry.plugins.atl.CurrentAction.Create);
		}
	}
	,dragTexture: function(e) {
		var _g = this.tex;
		var v = _g.x + (e.relX - this.dragX) / this.zooms[this.zoom];
		_g.posChanged = true;
		_g.x = v;
		var _g1 = this.tex;
		var v1 = _g1.y + (e.relY - this.dragY) / this.zooms[this.zoom];
		_g1.posChanged = true;
		_g1.y = v1;
		var _this = this.grid;
		_this.posChanged = true;
		_this.x = this.tex.x;
		_this.posChanged = true;
		_this.y = this.tex.y;
		this.dragX = e.relX;
		this.dragY = e.relY;
		this.tex.syncPos();
		var s = this.sprites.iterator();
		while(s.hasNext()) {
			var s1 = s.next();
			s1.resync(false);
		}
		if(e.kind == hxd.EventKind.ERelease || e.kind == hxd.EventKind.EReleaseOutside) {
			this.scene.s2d.stopDrag();
		}
	}
	,onEvent: function(e) {
		switch(e.kind._hx_index) {
		case 0:
			if(this.tex != null) {
				if(e.button == 0) {
					if(hxd.Key.isDown(16)) {
						this.tool.start(e);
					} else {
						this.dragX = e.relX;
						this.dragY = e.relY;
						this.scene.s2d.startDrag($bind(this,this.dragTexture),null,e);
					}
				}
			}
			break;
		case 1:
			if(e.button == 1 && this.tex != null) {
				var pt = new h2d.col.Point(e.relX,e.relY);
				this.tex.globalToLocal(pt);
				var curs = [];
				var _g = 0;
				var _g1 = this.atlas.sprites;
				while(_g < _g1.length) {
					var s = _g1[_g];
					++_g;
					if(s.x <= pt.x && s.x + s.width > pt.x && s.y <= pt.y && s.y + s.height > pt.y) {
						curs.push(s);
					}
				}
				if(curs.length != 0) {
					var _g2 = [];
					var _g3 = 0;
					while(_g3 < curs.length) {
						var s1 = curs[_g3];
						++_g3;
						_g2.push({ label : s1.id + "#" + s1.index, click : (function(sprite,f) {
							return function() {
								f[0](sprite[0]);
							};
						})([s1],[$bind(this,this.focus)])});
					}
					new hide.comp.ContextMenu(_g2);
				}
			}
			break;
		case 2:
			break;
		case 5:
			if(e.wheelDelta > 0) {
				this.zoom--;
				if(this.zoom < 0) {
					this.zoom = 0;
				}
			} else {
				this.zoom++;
				if(this.zoom >= this.zooms.length) {
					this.zoom = this.zooms.length - 1;
				}
			}
			var z = this.zooms[this.zoom];
			if(this.tex != null) {
				this.tex.smooth = z < 1;
			}
			var _this = this.scaler;
			_this.posChanged = true;
			_this.scaleX = z;
			_this.posChanged = true;
			_this.scaleY = z;
			this.scaler.syncPos();
			this.tex.syncPos();
			var s2 = this.sprites.iterator();
			while(s2.hasNext()) {
				var s3 = s2.next();
				s3.resync(true);
			}
			break;
		case 10:
			break;
		default:
		}
	}
	,selCursor: function() {
		if(this.toolAction == cherry.plugins.atl.CurrentAction.None && hxd.Key.isDown(16) || this.toolAction == cherry.plugins.atl.CurrentAction.Create) {
			hxd.System.setNativeCursor(hxd.Cursor.Hide);
		} else {
			hxd.System.setNativeCursor(hxd.Cursor.Move);
		}
	}
	,init: function() {
		var _gthis = this;
		this.canvas = new h2d.Interactive(this.scene.get_width(),this.scene.get_height(),this.scene.s2d);
		this.canvas.set_cursor(hxd.Cursor.Callback($bind(this,this.selCursor)));
		this.canvas.onMove = function(_) {
			_gthis.selCursor();
			return;
		};
		this.canvas.onCheck = function(_1) {
			_gthis.selCursor();
			return;
		};
		this.canvas.onPush = $bind(this,this.onEvent);
		this.canvas.onRelease = $bind(this,this.onEvent);
		this.canvas.onReleaseOutside = $bind(this,this.onEvent);
		this.canvas.onWheel = $bind(this,this.onEvent);
		this.canvas.enableRightButton = true;
		this.scaler = new h2d.Object(this.scene.s2d);
		var _this = this.scaler;
		var v = this.scene.get_width() >> 1;
		_this.posChanged = true;
		_this.x = v;
		var _this1 = this.scaler;
		var v1 = this.scene.get_height() >> 1;
		_this1.posChanged = true;
		_this1.y = v1;
		this.grid = new h2d.Bitmap(h2d.Tile.fromColor(16711680),this.scaler);
		this.gridShader = new cherry.plugins.generic.shaders.CheckerShader();
		this.grid.addShader(this.gridShader);
		this.tool = new cherry.plugins.atl.CreateTool(this,this.scene.s2d);
		this.atlas = new cherry.fmt.atl.AtlasData();
		this.atlas.load(JSON.parse(js.node.Fs.readFileSync(this.getPath(),{ encoding : "utf8"})));
		if(this.atlas.texturePath != null) {
			this.initTexture(true);
		} else {
			this.initSprites();
			this.initProps();
		}
	}
	,initTexture: function(isInit) {
		if(isInit == null) {
			isInit = false;
		}
		var _gthis = this;
		this.scene.loadTexture(this.state.path,this.atlas.texturePath,function(t) {
			_gthis.atlas.texture = h2d.Tile.fromTexture(t);
			_gthis.initScene();
			if(isInit) {
				_gthis.initSprites();
			}
			_gthis.initProps();
			return;
		});
	}
	,initScene: function() {
		this.scaler.removeChildren();
		this.scaler.addChild(this.grid);
		this.tex = new h2d.Bitmap(this.atlas.texture,this.scaler);
		var t = this.atlas.texture.innerTex;
		var _this = this.tex;
		_this.posChanged = true;
		_this.x = -(t.width >> 1);
		_this.posChanged = true;
		_this.y = -(t.height >> 1);
		var _this1 = this.grid;
		_this1.posChanged = true;
		_this1.x = this.tex.x;
		_this1.posChanged = true;
		_this1.y = this.tex.y;
		this.grid.tile.setSize(t.width,t.height);
	}
	,storeEditorData: function(s) {
		s._id = s.id;
	}
	,initSprites: function() {
		var _g = 0;
		var _g1 = this.atlas.sprites;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var e = new cherry.plugins.atl.SpriteEdit(this,s,this.scene.s2d);
			s._id = s.id;
			this.sprites.set(s,e);
		}
	}
	,createTile: function(bounds) {
		var _gthis = this;
		var s = new cherry.fmt.atl.AtlasSprite("tile" + this.atlas.sprites.length);
		s._id = s.id;
		s.x = bounds.xMin;
		s.y = bounds.yMin;
		s.width = bounds.xMax - bounds.xMin;
		s.height = bounds.yMax - bounds.yMin;
		this.atlas.addSprite(s);
		var e = new cherry.plugins.atl.SpriteEdit(this,s,this.scene.s2d);
		this.sprites.set(s,e);
		var oldFocus = this.current;
		this.focus(s,true);
		var tmp = hide.ui.HistoryElement.Custom(function(undo) {
			if(undo) {
				_gthis.focus(oldFocus,true);
				_gthis.atlas.removeSprite(s);
				_gthis.sprites.remove(s);
				if(e != null && e.parent != null) {
					e.parent.removeChild(e);
				}
			} else {
				_gthis.atlas.addSprite(s);
				_gthis.sprites.set(s,e);
				_gthis.scene.s2d.addChild(e);
				_gthis.focus(s,true);
				e.resync(true);
			}
		});
		this.undo.change(tmp);
	}
	,clone: function(sprite,ev) {
		var _gthis = this;
		var s = sprite.clone();
		s._id = s.id;
		this.atlas.addSprite(s);
		var e = new cherry.plugins.atl.SpriteEdit(this,s,this.scene.s2d);
		this.sprites.set(s,e);
		var oldFocus = this.current;
		this.focus(s,true);
		this.undoChain = true;
		e.drag.start(ev,this.sprites.h[oldFocus.__id__].drag.inter);
		var tmp = hide.ui.HistoryElement.Custom(function(undo) {
			if(undo) {
				_gthis.focus(oldFocus,true);
				_gthis.atlas.removeSprite(s);
				_gthis.sprites.remove(s);
				if(e != null && e.parent != null) {
					e.parent.removeChild(e);
				}
			} else {
				_gthis.atlas.addSprite(s);
				_gthis.sprites.set(s,e);
				_gthis.scene.s2d.addChild(e);
				_gthis.focus(s,true);
				_gthis.undo.redo();
			}
		});
		this.undo.change(tmp);
	}
	,'delete': function(s) {
		var _gthis = this;
		var idx = s.index;
		console.log("plugins/atlasser/src/AtlasEditor.hx:306:","DEL");
		var e = this.sprites.h[s.__id__];
		this.focus(null,true);
		this.atlas.removeSprite(s);
		this.sprites.remove(s);
		if(e != null && e.parent != null) {
			e.parent.removeChild(e);
		}
		var tmp = hide.ui.HistoryElement.Custom(function(undo) {
			if(undo) {
				_gthis.atlas.addSprite(s,idx);
				_gthis.sprites.set(s,e);
				_gthis.scene.s2d.addChild(e);
				_gthis.focus(s,true);
			} else {
				_gthis.focus(null,true);
				_gthis.atlas.removeSprite(s);
				_gthis.sprites.remove(s);
				if(e != null && e.parent != null) {
					e.parent.removeChild(e);
				}
			}
		});
		this.undo.change(tmp);
	}
	,focus: function(sprite,isHistory) {
		if(isHistory == null) {
			isHistory = false;
		}
		var _gthis = this;
		if(this.current != null) {
			this.sprites.h[this.current.__id__].set_focused(false);
		}
		var old = this.current;
		this.current = sprite;
		sprite._id = sprite.id;
		if(sprite != null) {
			this.sprites.h[sprite.__id__].set_focused(true);
			this.scene.s2d.over(this.sprites.h[sprite.__id__]);
		}
		this.initProps();
		if(!isHistory) {
			var tmp = hide.ui.HistoryElement.Custom(function(undo) {
				if(undo) {
					_gthis.focus(old,true);
				} else {
					_gthis.focus(sprite,true);
				}
			});
			this.undo.change(tmp);
		}
	}
	,onAtlasChange: function(field) {
		switch(field) {
		case "_anim":
			var key = this.atlas._anim;
			var _this = this.atlas.anims;
			this.focus((__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).sprites[0]);
			break;
		case "_curr":
			this.focus(this.atlas.sprites[this.atlas._curr]);
			break;
		case "texturePath":
			this.initTexture();
			break;
		}
	}
	,onSpriteChange: function(field) {
		if(this.current != null) {
			console.log("plugins/atlasser/src/AtlasEditor.hx:360:",this.props.isTempChange);
			if(field == "current._id" && !this.props.isTempChange) {
				this.atlas.renameSprite(this.current,this.current._id);
				this.initProps();
				return;
			} else if(field == "anim._id" && !this.props.isTempChange) {
				try {
					this.atlas.renameAnim(this.get_anim(),this.get_anim()._id);
				} catch( e ) {
					var e1 = ((e) instanceof js._Boot.HaxeError) ? e.val : e;
					if(typeof(e1) == "string") {
						var e2 = e1;
					} else {
						throw e;
					}
				}
				var s = this.current;
				s._id = s.id;
				this.initProps();
				return;
			} else {
				this.updateTexture(this.current,this.props.element.find("[data-index=\"" + this.current.index + "\"]"));
			}
			this.sprites.h[this.current.__id__].resync(true);
		}
	}
	,onManageChange: function(field) {
		switch(field) {
		case "backgroundColor":
			this.scene.engine.backgroundColor = -16777216 | this.manageCtx.backgroundColor;
			break;
		case "checker":
			this.grid.set_visible(this.manageCtx.checker);
			break;
		case "checkerSize":
			this.gridShader.checkerSize__ = this.manageCtx.checkerSize;
			break;
		case "whiteChecker":
			if(this.manageCtx.whiteChecker) {
				var _this = this.gridShader.whiteColor__;
				_this.x = 1.;
				_this.y = 1.;
				_this.z = 1.;
				_this.w = 1.;
				var _this1 = this.gridShader.blackColor__;
				_this1.x = 0.8;
				_this1.y = 0.8;
				_this1.z = 0.8;
				_this1.w = 1.;
			} else {
				var _this2 = this.gridShader.whiteColor__;
				_this2.x = 0.2;
				_this2.y = 0.2;
				_this2.z = 0.2;
				_this2.w = 1.;
				var _this3 = this.gridShader.blackColor__;
				_this3.x = 0.066666666666666666;
				_this3.y = 0.066666666666666666;
				_this3.z = 0.066666666666666666;
				_this3.w = 1.;
			}
			break;
		}
	}
	,resyncSprite: function() {
		if(this.current != null) {
			var a = this.current;
			this.props.element.find("[field='current.x']").val(a.x).next().val(a.x);
			this.props.element.find("[field='current.y']").val(a.y).next().val(a.y);
			this.props.element.find("[field='current.width']").val(a.width).next().val(a.width);
			this.props.element.find("[field='current.height']").val(a.height).next().val(a.height);
			var base = this.props.element.find("[data-index=\"" + a.index + "\"]");
			this.updateTexture(a,base);
			base.next().find(">span").text("#" + a.index + " @ [" + a.x + "," + a.y + "; " + a.width + "x" + a.height + "]");
		}
	}
	,sizeUndo: function(s,b) {
		var _gthis = this;
		var cur_yMin;
		var cur_yMax;
		var cur_xMin;
		var cur_xMax;
		var x0 = s.x;
		var y0 = s.y;
		cur_xMin = 2147483647;
		cur_yMin = 2147483647;
		cur_xMax = -2147483648;
		cur_yMax = -2147483648;
		cur_xMin = x0;
		cur_yMin = y0;
		cur_xMax = x0 + s.width;
		cur_yMax = y0 + s.height;
		var isChain = this.undoChain;
		this.undoChain = false;
		var tmp = hide.ui.HistoryElement.Custom(function(undo) {
			if(undo) {
				s.x = b.xMin;
				s.y = b.yMin;
				s.width = b.xMax - b.xMin;
				s.height = b.yMax - b.yMin;
			} else {
				s.x = cur_xMin;
				s.y = cur_yMin;
				s.width = cur_xMax - cur_xMin;
				s.height = cur_yMax - cur_yMin;
			}
			_gthis.resyncSprite();
			_gthis.sprites.h[s.__id__].resync(true);
			if(undo && isChain) {
				_gthis.undo.undo();
			}
		});
		this.undo.change(tmp);
	}
	,updateTexture: function(sprite,el) {
		var tex = el.find(".tile-preview");
		var scale = Math.min(80 / sprite.width,60 / sprite.height);
		var size = this.atlas.texture.width * scale;
		tex.css({ "background-size" : size + "px", "background-position" : -sprite.x * scale + "px " + -sprite.y * scale + "px", width : sprite.width * scale + "px", height : sprite.height * scale + "px"});
		tex.toggleClass("mag",scale >= 1);
		return tex;
	}
	,initProps: function() {
		var _gthis = this;
		this.props.clear();
		if(this.current != null) {
			this.atlas._curr = this.atlas.sprites.indexOf(this.current);
			this.atlas._anim = this.current.id;
		} else {
			this.atlas._curr = null;
			this.atlas._anim = null;
		}
		var tmp = this.props;
		var _g16 = [];
		var s = this.atlas.anims.keys();
		while(s.hasNext()) {
			var s1 = s.next();
			_g16.push("<option value=\"" + s1 + "\">" + s1 + "</option>");
		}
		var tmp1 = "<dl>\r\n      <dt>Texture</dt><dd><input type=\"texturepath\" field=\"texturePath\"></dd>\r\n      <dt>Anim</dt><dd><select field=\"_anim\" type=\"text\">" + _g16.join("") + "</select></dd>\r\n      <dt>Sprite</dt><dd><select field=\"_curr\" type=\"number\">";
		var _g17 = [];
		var _g18 = 0;
		var _g19 = this.atlas.sprites.length;
		while(_g18 < _g19) {
			var i = _g18++;
			var _this = this.atlas.sprites[i];
			_g17.push("<option value=\"" + i + "\">" + (_this.id + "#" + _this.index) + "</option>");
		}
		tmp.add(hide.comp.PropsEditor.makeSectionEl("General",$(tmp1 + _g17.join("") + "</select></dd>\r\n    </dl>")),this.atlas,$bind(this,this.onAtlasChange));
		var max = 1024;
		if(this.atlas.texture != null) {
			max = this.atlas.texture.innerTex.width;
		}
		var tp;
		if(this.current != null) {
			tp = $("<dl>\r\n        <dt>ID</dt><dd><input type=\"text\" field=\"current._id\"></dd>\r\n        <dt>Position</dt><dd class=\"vec2\">\r\n          <span>X</span> <input type=\"number\" max=\"" + max + "\" field=\"current.x\"/>\r\n          <span>Y</span> <input type=\"number\" max=\"" + max + "\" field=\"current.y\"/>\r\n        </dd>\r\n        <dt>Size</dt><dd class=\"vec2\">\r\n          <span>W</span> <input type=\"number\" max=\"" + max + "\" field=\"current.width\"/>\r\n          <span>H</span> <input type=\"number\" max=\"" + max + "\" field=\"current.height\"/>\r\n        </dd>\r\n        <dt>Origin</dt><dd class=\"vec2\">\r\n          <span>X</span> <input type=\"number\" max=\"" + max + "\" field=\"current.originX\"/>\r\n          <span>Y</span> <input type=\"number\" max=\"" + max + "\" field=\"current.originY\"/>\r\n        </dd>\r\n        <dt>Delay</dt><dd><input type=\"number\" step=\"0.01\" max=\"100\" field=\"current.delay\"></dd>\r\n      </dl>");
			tp = hide.comp.PropsEditor.makeGroupEl("Tile info",tp);
			var el = $("<dl class='anim-info'></dl>");
			var key = this.current.id;
			var _this1 = this.atlas.anims;
			var animInfo = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
			var anim = animInfo.sprites;
			var _g20 = 0;
			while(_g20 < anim.length) {
				var a = anim[_g20];
				++_g20;
				var base = $("<dt data-index=\"" + a.index + "\"><div class=\"tile-preview\"></div></dt>\r\n          <dd class=\"selectable\">\r\n            <input class=\"btn move-up\" type=\"button\" value=\"↑\" title=\"Move up\"/><input class=\"btn move-down\" type=\"button\" value=\"↓\" title=\"Move down\"/>\r\n            <span class=\"info\">#" + a.index + " @ [" + a.x + "," + a.y + "; " + a.width + "x" + a.height + "]</span>\r\n          </dd>");
				base.find(".move-up,.move-down").click((function() {
					return function(e) {
						var idx = Std.parseInt($(this).parent().prev().attr("data-index"));
						var idx2 = $(this).hasClass("move-up") ? idx - 1 : idx + 1;
						if(idx2 >= 0 && idx2 < anim.length) {
							var tmp2 = anim[idx];
							anim[idx] = anim[idx2];
							anim[idx2] = tmp2;
							anim[idx].index = idx;
							tmp2.index = idx2;
							if(idx == 0) {
								var k = tmp2.id;
								var v = anim[idx];
								var _this2 = _gthis.atlas.names;
								if(__map_reserved[k] != null) {
									_this2.setReserved(k,v);
								} else {
									_this2.h[k] = v;
								}
							} else if(idx2 == 0) {
								var k1 = tmp2.id;
								var v1 = anim[idx2];
								var _this3 = _gthis.atlas.names;
								if(__map_reserved[k1] != null) {
									_this3.setReserved(k1,v1);
								} else {
									_this3.h[k1] = v1;
								}
							}
							_gthis.initProps();
						}
					};
				})());
				if(a == this.current) {
					base.filter("dd").addClass("selected");
				}
				var tex = base.find(".tile-preview");
				var foc = [(function(sprite,f) {
					return function() {
						f[0](sprite[0]);
					};
				})([a],[$bind(this,this.focus)])];
				tex.click((function(foc1) {
					return function(_) {
						foc1[0]();
					};
				})(foc));
				tex.css("background-image","url('file://" + this.ide.getPath(this.atlas.texturePath) + "')");
				this.updateTexture(a,base);
				base.appendTo(el);
			}
			hide.comp.PropsEditor.makePropsList([{ name : "anim._id", t : hrt.prefab.PropType.PString(), disp : "Anim name"}]).children().appendTo(el);
			tp = tp.add(hide.comp.PropsEditor.makeGroupEl("Animation info",el));
		} else {
			tp = hide.comp.PropsEditor.makePropsList([{ name : "none", disp : "", t : hrt.prefab.PropType.PUnsupported("Select tile first!")}]);
		}
		this.props.add(hide.comp.PropsEditor.makeSectionEl("Selected sprite",tp),this,$bind(this,this.onSpriteChange));
		this.props.add(hide.comp.PropsEditor.makeSectionEl("Manage",hide.comp.PropsEditor.makePropsList([{ name : "backgroundColor", t : hrt.prefab.PropType.PVec(3), disp : "BG Color"},{ name : "checker", t : hrt.prefab.PropType.PBool, disp : "Show checker"},{ name : "whiteChecker", t : hrt.prefab.PropType.PBool, disp : "White checker"},{ name : "checkerSize", t : hrt.prefab.PropType.PInt(2,64), disp : "Checker size"}])),this.manageCtx,$bind(this,this.onManageChange));
	}
	,getDefaultContent: function() {
		return haxe.io.Bytes.ofString(JSON.stringify(new cherry.fmt.atl.AtlasData().save()));
	}
	,save: function() {
		js.node.Fs.writeFileSync(this.getPath(),JSON.stringify(this.atlas.save()));
		hide.view.FileView.prototype.save.call(this);
	}
	,__class__: AtlasEditor
	,__properties__: $extend(hide.view.FileView.prototype.__properties__,{get_currZoom:"get_currZoom",get_anim:"get_anim"})
});
Math.__name__ = "Math";
var cherry = cherry || {};
if(!cherry.fmt) cherry.fmt = {};
if(!cherry.fmt.atl) cherry.fmt.atl = {};
cherry.fmt.atl.AtlasData = $hxClasses["cherry.fmt.atl.AtlasData"] = function() {
	this.anims = new haxe.ds.StringMap();
	this.names = new haxe.ds.StringMap();
	this.sprites = [];
};
cherry.fmt.atl.AtlasData.__name__ = "cherry.fmt.atl.AtlasData";
cherry.fmt.atl.AtlasData.prototype = {
	get: function(name) {
		var _this = this.names;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getAnim: function(name) {
		var _this = this.anims;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getFrame: function(anim,index) {
		var _this = this.anims;
		return (__map_reserved[anim] != null ? _this.getReserved(anim) : _this.h[anim]).sprites[index];
	}
	,getTile: function(name) {
		var _this = this.names;
		return (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]).tile;
	}
	,getAnimTiles: function(name) {
		var _this = this.anims;
		return (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]).tiles;
	}
	,getAnimTile: function(anim,index) {
		var _this = this.anims;
		return (__map_reserved[anim] != null ? _this.getReserved(anim) : _this.h[anim]).tiles[index];
	}
	,addSprite: function(s,index) {
		if(index == null) {
			index = -1;
		}
		this.sprites.push(s);
		var key = s.id;
		var _this = this.anims;
		var anim = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(anim == null) {
			var this1 = this.anims;
			var k = s.id;
			var v = new cherry.fmt.atl.AtlasAnim(s.id,[s]);
			var _this1 = this1;
			if(__map_reserved[k] != null) {
				_this1.setReserved(k,v);
			} else {
				_this1.h[k] = v;
			}
			var k1 = s.id;
			var _this2 = this.names;
			if(__map_reserved[k1] != null) {
				_this2.setReserved(k1,s);
			} else {
				_this2.h[k1] = s;
			}
			var k2 = s.id + "#" + s.index;
			var _this3 = this.names;
			if(__map_reserved[k2] != null) {
				_this3.setReserved(k2,s);
			} else {
				_this3.h[k2] = s;
			}
		} else if(index == -1) {
			s.index = anim.sprites.length;
			var k3 = s.id + "#" + s.index;
			var _this4 = this.names;
			if(__map_reserved[k3] != null) {
				_this4.setReserved(k3,s);
			} else {
				_this4.h[k3] = s;
			}
			anim.sprites.push(s);
		} else {
			s.index = index;
			var k4 = s.id + "#" + s.index;
			var _this5 = this.names;
			if(__map_reserved[k4] != null) {
				_this5.setReserved(k4,s);
			} else {
				_this5.h[k4] = s;
			}
			anim.sprites.splice(index,0,s);
			while(++index < anim.sprites.length) {
				var n = anim.sprites[index];
				n.index = index;
				var k5 = n.id + "#" + n.index;
				var _this6 = this.names;
				if(__map_reserved[k5] != null) {
					_this6.setReserved(k5,n);
				} else {
					_this6.h[k5] = n;
				}
			}
		}
	}
	,removeSprite: function(s) {
		HxOverrides.remove(this.sprites,s);
		var key = s.id;
		var _this = this.anims;
		var anim = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		HxOverrides.remove(anim.sprites,s);
		if(anim.sprites.length == 0) {
			this.anims.remove(s.id);
			this.names.remove(s.id);
			this.names.remove(s.id + "#" + s.index);
		} else {
			if(s.index == 0) {
				var k = s.id;
				var v = anim.sprites[0];
				var _this1 = this.names;
				if(__map_reserved[k] != null) {
					_this1.setReserved(k,v);
				} else {
					_this1.h[k] = v;
				}
			}
			this.names.remove(s.id + "#" + anim.sprites.length);
			var _g = s.index;
			var _g1 = anim.sprites.length;
			while(_g < _g1) {
				var i = _g++;
				anim.sprites[i].index--;
				var _this2 = anim.sprites[i];
				var k1 = _this2.id + "#" + _this2.index;
				var v1 = anim.sprites[i];
				var _this3 = this.names;
				if(__map_reserved[k1] != null) {
					_this3.setReserved(k1,v1);
				} else {
					_this3.h[k1] = v1;
				}
			}
		}
	}
	,renameSprite: function(s,newId) {
		if(s.id == newId) {
			return;
		}
		var key = s.id;
		var _this = this.anims;
		var anim = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		HxOverrides.remove(anim.sprites,s);
		if(anim.sprites.length == 0) {
			this.anims.remove(s.id);
			this.names.remove(s.id);
			this.names.remove(s.id + "#" + s.index);
		} else {
			if(s.index == 0) {
				var k = s.id;
				var v = anim.sprites[0];
				var _this1 = this.names;
				if(__map_reserved[k] != null) {
					_this1.setReserved(k,v);
				} else {
					_this1.h[k] = v;
				}
			}
			this.names.remove(s.id + "#" + anim.sprites.length);
			var _g = s.index;
			var _g1 = anim.sprites.length;
			while(_g < _g1) {
				var i = _g++;
				anim.sprites[i].index--;
				var _this2 = anim.sprites[i];
				var k1 = _this2.id + "#" + _this2.index;
				var v1 = anim.sprites[i];
				var _this3 = this.names;
				if(__map_reserved[k1] != null) {
					_this3.setReserved(k1,v1);
				} else {
					_this3.h[k1] = v1;
				}
			}
		}
		s.id = newId;
		var _this4 = this.anims;
		anim = __map_reserved[newId] != null ? _this4.getReserved(newId) : _this4.h[newId];
		if(anim == null) {
			s.index = 0;
			var this1 = this.anims;
			anim = new cherry.fmt.atl.AtlasAnim(newId,[s]);
			var v2 = anim;
			var _this5 = this1;
			if(__map_reserved[newId] != null) {
				_this5.setReserved(newId,v2);
			} else {
				_this5.h[newId] = v2;
			}
			anim.id = newId;
			var _this6 = this.names;
			if(__map_reserved[newId] != null) {
				_this6.setReserved(newId,s);
			} else {
				_this6.h[newId] = s;
			}
		} else {
			s.index = anim.sprites.length;
			anim.sprites.push(s);
		}
		var k2 = s.id + "#" + s.index;
		var _this7 = this.names;
		if(__map_reserved[k2] != null) {
			_this7.setReserved(k2,s);
		} else {
			_this7.h[k2] = s;
		}
	}
	,renameAnim: function(anim,newId) {
		if(anim.id == newId) {
			return;
		}
		var _this = this.anims;
		var ref = __map_reserved[newId] != null ? _this.getReserved(newId) : _this.h[newId];
		if(ref != null) {
			throw new js._Boot.HaxeError("Animation name already occupied! " + anim.id + " -> " + newId);
		} else {
			this.anims.remove(anim.id);
			var _this1 = this.anims;
			if(__map_reserved[newId] != null) {
				_this1.setReserved(newId,anim);
			} else {
				_this1.h[newId] = anim;
			}
			var _g = 0;
			var _g1 = anim.sprites;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				this.names.remove(s.id + "#" + s.index);
				s.id = newId;
				var key = s.id + "#" + s.index;
				var _this2 = this.names;
				if(__map_reserved[key] != null) {
					_this2.setReserved(key,s);
				} else {
					_this2.h[key] = s;
				}
			}
			this.names.remove(anim.id);
			anim.id = newId;
			var key1 = anim.id;
			var value = anim.sprites[0];
			var _this3 = this.names;
			if(__map_reserved[key1] != null) {
				_this3.setReserved(key1,value);
			} else {
				_this3.h[key1] = value;
			}
		}
	}
	,moveSprite: function(s,newIndex) {
		if(s.index == newIndex) {
			return;
		}
		var key = s.id;
		var _this = this.anims;
		var anim = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(newIndex < 0) {
			newIndex = 0;
		} else if(newIndex >= anim.sprites.length) {
			newIndex = anim.sprites.length - 1;
		}
		if(s.index == newIndex) {
			return;
		}
		var i = s.index - newIndex;
		if((i < 0 ? -i : i) == 1) {
			var tmp = anim.sprites[s.index];
			anim.sprites[s.index] = anim.sprites[newIndex];
			anim.sprites[newIndex] = tmp;
		} else {
			HxOverrides.remove(anim.sprites,s);
			anim.sprites.splice(newIndex,0,s);
		}
		var _g = 0;
		var _g1 = anim.sprites.length;
		while(_g < _g1) {
			var i1 = _g++;
			anim.sprites[i1].index = i1;
			var _this1 = anim.sprites[i1];
			var k = _this1.id + "#" + _this1.index;
			var v = anim.sprites[i1];
			var _this2 = this.names;
			if(__map_reserved[k] != null) {
				_this2.setReserved(k,v);
			} else {
				_this2.h[k] = v;
			}
		}
		var k1 = s.id;
		var v1 = anim.sprites[0];
		var _this3 = this.names;
		if(__map_reserved[k1] != null) {
			_this3.setReserved(k1,v1);
		} else {
			_this3.h[k1] = v1;
		}
	}
	,save: function() {
		var f = this.texturePath;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.sprites;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			_g.push(s.save());
		}
		var f1 = _g;
		var _g3 = [];
		var kv = new haxe.iterators.MapKeyValueIterator(this.anims);
		while(kv.hasNext()) {
			var kv1 = kv.next();
			var kv2 = kv1.key;
			var _g4 = [];
			var _g5 = 0;
			var _g6 = kv1.value.sprites;
			while(_g5 < _g6.length) {
				var s1 = _g6[_g5];
				++_g5;
				_g4.push(this.sprites.indexOf(s1));
			}
			_g3.push({ id : kv2, sprites : _g4});
		}
		var f2 = { ver : 1, texture : f, sprites : f1, anims : _g3};
		return f2;
	}
	,load: function(data) {
		if(data.ver == null) {
			this.texturePath = data.texture;
			var _g = 0;
			var _g1 = data.sprites;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var s1 = cherry.fmt.atl.AtlasSprite.load(s,0);
				this.sprites.push(s1);
				if(s1.index == 0) {
					var key = s1.id;
					var _this = this.names;
					if(__map_reserved[key] != null) {
						_this.setReserved(key,s1);
					} else {
						_this.h[key] = s1;
					}
				}
				var key1 = s1.id + "#" + s1.index;
				var _this1 = this.names;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,s1);
				} else {
					_this1.h[key1] = s1;
				}
			}
			var _g2 = 0;
			var _g3 = data.anims;
			while(_g2 < _g3.length) {
				var a = _g3[_g2];
				++_g2;
				var this1 = this.anims;
				var key2 = a.id;
				var a1 = a.id;
				var _g21 = [];
				var _g31 = 0;
				var _g4 = a.sprites;
				while(_g31 < _g4.length) {
					var i = _g4[_g31];
					++_g31;
					_g21.push(this.sprites[i]);
				}
				var value = new cherry.fmt.atl.AtlasAnim(a1,_g21);
				var _this2 = this1;
				if(__map_reserved[key2] != null) {
					_this2.setReserved(key2,value);
				} else {
					_this2.h[key2] = value;
				}
			}
		} else if(data.ver == 1) {
			var v = data.ver;
			this.texturePath = data.texture;
			var _g5 = 0;
			var _g11 = data.sprites;
			while(_g5 < _g11.length) {
				var s2 = _g11[_g5];
				++_g5;
				var s3 = cherry.fmt.atl.AtlasSprite.load(s2,v);
				this.sprites.push(s3);
				if(s3.index == 0) {
					var key3 = s3.id;
					var _this3 = this.names;
					if(__map_reserved[key3] != null) {
						_this3.setReserved(key3,s3);
					} else {
						_this3.h[key3] = s3;
					}
				}
				var key4 = s3.id + "#" + s3.index;
				var _this4 = this.names;
				if(__map_reserved[key4] != null) {
					_this4.setReserved(key4,s3);
				} else {
					_this4.h[key4] = s3;
				}
			}
			var _g22 = 0;
			var _g32 = data.anims;
			while(_g22 < _g32.length) {
				var a2 = _g32[_g22];
				++_g22;
				var this11 = this.anims;
				var key5 = a2.id;
				var a3 = a2.id;
				var _g23 = [];
				var _g33 = 0;
				var _g41 = a2.sprites;
				while(_g33 < _g41.length) {
					var i1 = _g41[_g33];
					++_g33;
					_g23.push(this.sprites[i1]);
				}
				var value1 = new cherry.fmt.atl.AtlasAnim(a3,_g23);
				var _this5 = this11;
				if(__map_reserved[key5] != null) {
					_this5.setReserved(key5,value1);
				} else {
					_this5.h[key5] = value1;
				}
			}
		} else {
			throw new js._Boot.HaxeError("Unsupported version: " + Std.string(data.ver));
		}
	}
	,loadV0: function(data,v) {
		this.texturePath = data.texture;
		var _g = 0;
		var _g1 = data.sprites;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var s1 = cherry.fmt.atl.AtlasSprite.load(s,v);
			this.sprites.push(s1);
			if(s1.index == 0) {
				var key = s1.id;
				var _this = this.names;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,s1);
				} else {
					_this.h[key] = s1;
				}
			}
			var key1 = s1.id + "#" + s1.index;
			var _this1 = this.names;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,s1);
			} else {
				_this1.h[key1] = s1;
			}
		}
		var _g2 = 0;
		var _g3 = data.anims;
		while(_g2 < _g3.length) {
			var a = _g3[_g2];
			++_g2;
			var this1 = this.anims;
			var key2 = a.id;
			var a1 = a.id;
			var _g21 = [];
			var _g31 = 0;
			var _g4 = a.sprites;
			while(_g31 < _g4.length) {
				var i = _g4[_g31];
				++_g31;
				_g21.push(this.sprites[i]);
			}
			var value = new cherry.fmt.atl.AtlasAnim(a1,_g21);
			var _this2 = this1;
			if(__map_reserved[key2] != null) {
				_this2.setReserved(key2,value);
			} else {
				_this2.h[key2] = value;
			}
		}
	}
	,__class__: cherry.fmt.atl.AtlasData
};
cherry.fmt.atl.AtlasAnim = $hxClasses["cherry.fmt.atl.AtlasAnim"] = function(id,sprites) {
	this.id = id;
	this.sprites = sprites;
	this.tiles = [];
	this.syncTiles();
};
cherry.fmt.atl.AtlasAnim.__name__ = "cherry.fmt.atl.AtlasAnim";
cherry.fmt.atl.AtlasAnim.prototype = {
	get_length: function() {
		return this.sprites.length;
	}
	,makeFrames: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.sprites;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			_g.push(s.toFrame());
		}
		return _g;
	}
	,makeAnimation: function(parent) {
		return new h2d.Animation(this.makeFrames(),parent);
	}
	,makeAnim: function(speed,parent) {
		return new h2d.Anim(this.tiles.slice(),speed,parent);
	}
	,syncTiles: function() {
		var _g = 0;
		var _g1 = this.sprites.length;
		while(_g < _g1) {
			var i = _g++;
			this.tiles[i] = this.sprites[i].tile;
		}
		while(this.tiles.length > this.sprites.length) this.tiles.pop();
	}
	,__class__: cherry.fmt.atl.AtlasAnim
	,__properties__: {get_length:"get_length"}
};
cherry.fmt.atl.AtlasSprite = $hxClasses["cherry.fmt.atl.AtlasSprite"] = function(id) {
	this.delay = 0;
	this.originY = 0;
	this.originX = 0;
	this.id = id;
	this.index = 0;
};
cherry.fmt.atl.AtlasSprite.__name__ = "cherry.fmt.atl.AtlasSprite";
cherry.fmt.atl.AtlasSprite.load = function(data,ver) {
	var t = new cherry.fmt.atl.AtlasSprite(data.id);
	t.index = data.index;
	t.x = data.x;
	t.y = data.y;
	t.width = data.width;
	t.height = data.height;
	if(ver > 0) {
		t.originX = data.dx;
		t.originY = data.dy;
		t.delay = data.delay;
	}
	return t;
};
cherry.fmt.atl.AtlasSprite.prototype = {
	get_fid: function() {
		return this.id + "#" + this.index;
	}
	,toFrame: function(isKey) {
		if(isKey == null) {
			isKey = true;
		}
		return new h2d.AnimationFrame(this.tile,this.delay,isKey);
	}
	,save: function() {
		return { id : this.id, index : this.index, x : this.x, y : this.y, width : this.width, height : this.height, dx : this.originX, dy : this.originY, delay : this.delay};
	}
	,clone: function() {
		var s = new cherry.fmt.atl.AtlasSprite(this.id);
		s.x = this.x;
		s.y = this.y;
		s.width = this.width;
		s.height = this.height;
		s.originX = this.originX;
		s.originY = this.originY;
		s.delay = this.delay;
		return s;
	}
	,__class__: cherry.fmt.atl.AtlasSprite
	,__properties__: {get_fid:"get_fid"}
};
if(!cherry.macro) cherry.macro = {};
cherry.macro.Helper = $hxClasses["cherry.macro.Helper"] = function() { };
cherry.macro.Helper.__name__ = "cherry.macro.Helper";
if(!cherry.plugins) cherry.plugins = {};
if(!cherry.plugins.atl) cherry.plugins.atl = {};
cherry.plugins.atl.Dragable = $hxClasses["cherry.plugins.atl.Dragable"] = function(parent,localTo) {
	h2d.Object.call(this,parent);
	this.drag = new h2d.col.Point();
	this.initial = new h2d.col.Point();
	this.pos = new h2d.col.Point();
	this.cardinalOffset = new h2d.col.Point();
	this.restrict = cherry.plugins.atl.DragRestrict.None;
	this.localTo = localTo;
};
cherry.plugins.atl.Dragable.__name__ = "cherry.plugins.atl.Dragable";
cherry.plugins.atl.Dragable.__super__ = h2d.Object;
cherry.plugins.atl.Dragable.prototype = $extend(h2d.Object.prototype,{
	start: function(e,relOrig) {
		var _this = this.drag;
		_this.x = e.relX;
		_this.y = e.relY;
		relOrig.localToGlobal(this.drag);
		this.syncPos();
		this.tempRestrict = this.restrict;
		var _this1 = this.initial;
		_this1.x = this.absX;
		_this1.y = this.absY;
		this.onStart();
		this.getScene().startDrag($bind(this,this.onDrag),null,e);
	}
	,getCardinal: function() {
		var angle = Math.atan2(this.absY + this.cardinalOffset.y - this.cardinalAnchor.y,this.absX + this.cardinalOffset.x - this.cardinalAnchor.x);
		var mul;
		if(angle < 0) {
			angle = -angle;
			mul = -1;
		} else {
			mul = 1;
		}
		if(angle < cherry.plugins.atl.Dragable.CARDINALS[0]) {
			return 0.;
		} else if(angle < cherry.plugins.atl.Dragable.CARDINALS[1]) {
			return cherry.plugins.atl.Dragable.PI4 * mul;
		} else if(angle < cherry.plugins.atl.Dragable.CARDINALS[2]) {
			return cherry.plugins.atl.Dragable.PI4 * mul;
		} else if(angle < cherry.plugins.atl.Dragable.CARDINALS[3]) {
			return cherry.plugins.atl.Dragable.PI8 * mul;
		} else {
			return Math.PI;
		}
	}
	,getDiagonal: function() {
		var angle = Math.atan2(this.absY + this.cardinalOffset.y - this.cardinalAnchor.y,this.absX + this.cardinalOffset.x - this.cardinalAnchor.x);
		var mul;
		if(angle < 0) {
			angle = -angle;
			mul = -1;
		} else {
			mul = 1;
		}
		if(angle < 0) {
			if(angle > -cherry.plugins.atl.Dragable.PI2) {
				return -cherry.plugins.atl.Dragable.PI4;
			} else {
				return -cherry.plugins.atl.Dragable.PI2 - cherry.plugins.atl.Dragable.PI4;
			}
		} else if(angle < cherry.plugins.atl.Dragable.PI2) {
			return cherry.plugins.atl.Dragable.PI4;
		} else {
			return cherry.plugins.atl.Dragable.PI2 + cherry.plugins.atl.Dragable.PI4;
		}
	}
	,getCardinalIndex: function(sign) {
		if(sign == null) {
			sign = false;
		}
		var angle = Math.atan2(this.absY + this.cardinalOffset.y - this.cardinalAnchor.y,this.absX + this.cardinalOffset.x - this.cardinalAnchor.x);
		var mul;
		if(angle < 0) {
			angle = -angle;
			mul = sign ? -1 : 1;
		} else {
			mul = 1;
		}
		if(angle < cherry.plugins.atl.Dragable.CARDINALS[0]) {
			return 0 * mul;
		} else if(angle < cherry.plugins.atl.Dragable.CARDINALS[1]) {
			return mul;
		} else if(angle < cherry.plugins.atl.Dragable.CARDINALS[2]) {
			return 2 * mul;
		} else if(angle < cherry.plugins.atl.Dragable.CARDINALS[3]) {
			return 3 * mul;
		} else {
			return 4 * mul;
		}
	}
	,onDrag: function(e) {
		var _g = this;
		_g.posChanged = true;
		_g.x += e.relX - this.drag.x;
		var _g1 = this;
		_g1.posChanged = true;
		_g1.y += e.relY - this.drag.y;
		var _this = this.drag;
		_this.x = e.relX;
		_this.y = e.relY;
		this.syncPos();
		if(this.restrict == cherry.plugins.atl.DragRestrict.NoneSnap) {
			if(hxd.Key.isPressed(16)) {
				switch(this.getCardinalIndex()) {
				case 1:case 3:
					this.tempRestrict = cherry.plugins.atl.DragRestrict.Diagonal;
					break;
				case 0:case 4:
					this.tempRestrict = cherry.plugins.atl.DragRestrict.Horizontal;
					break;
				default:
					this.tempRestrict = cherry.plugins.atl.DragRestrict.Vertical;
				}
			}
			if(hxd.Key.isReleased(16)) {
				this.tempRestrict = this.restrict;
			}
		} else {
			var tmp = this.restrict == cherry.plugins.atl.DragRestrict.NoneAngle;
		}
		var r = this.tempRestrict;
		switch(r._hx_index) {
		case 0:case 1:case 2:
			var _this1 = this.pos;
			_this1.x = this.absX;
			_this1.y = this.absY;
			break;
		case 3:
			var anchor = this.cardinalAnchor;
			var dx = this.absX + this.cardinalOffset.x - anchor.x;
			var dy = this.absY + this.cardinalOffset.y - anchor.y;
			var ang = Math.atan2(dy,dx);
			var aang = Math.abs(ang);
			var mul = ang != aang ? -1 : 1;
			if(aang > cherry.plugins.atl.Dragable.PI4 && aang < cherry.plugins.atl.Dragable.PI2 + cherry.plugins.atl.Dragable.PI4) {
				var _this2 = this.pos;
				_this2.x = anchor.x + dx - this.cardinalOffset.x;
				_this2.y = anchor.y + dx * (aang > cherry.plugins.atl.Dragable.PI2 ? -mul : mul) - this.cardinalOffset.y;
			} else {
				var _this3 = this.pos;
				_this3.x = anchor.x + dy * (aang > cherry.plugins.atl.Dragable.PI2 ? -mul : mul) - this.cardinalOffset.x;
				_this3.y = anchor.y + dy - this.cardinalOffset.y;
			}
			break;
		case 4:
			break;
		case 5:
			var _this4 = this.pos;
			_this4.x = this.initial.x;
			_this4.y = this.absY;
			break;
		case 6:
			var _this5 = this.pos;
			_this5.x = this.absX;
			_this5.y = this.initial.y;
			break;
		}
		this.localTo.globalToLocal(this.pos);
		var stop = e.kind == hxd.EventKind.ERelease || e.kind == hxd.EventKind.EReleaseOutside;
		if(stop) {
			this.getScene().stopDrag();
		}
		this.onChange(stop);
	}
	,onStart: function() {
	}
	,onChange: function(stop) {
	}
	,__class__: cherry.plugins.atl.Dragable
});
cherry.plugins.atl.CornerEdit = $hxClasses["cherry.plugins.atl.CornerEdit"] = function(w,h,type,parent) {
	if(h == null) {
		h = 6;
	}
	if(w == null) {
		w = 6;
	}
	this.maxScale = 9999;
	var _gthis = this;
	this.ed = parent;
	cherry.plugins.atl.Dragable.call(this,parent,this.ed.ed.tex);
	this.width = w;
	this.height = h;
	this.centered = type != cherry.plugins.atl.CornerType.Center;
	this.type = type;
	switch(type._hx_index) {
	case 4:
		this.restrict = cherry.plugins.atl.DragRestrict.NoneSnap;
		break;
	case 5:case 8:
		this.restrict = cherry.plugins.atl.DragRestrict.Vertical;
		break;
	case 6:case 7:
		this.restrict = cherry.plugins.atl.DragRestrict.Horizontal;
		break;
	default:
	}
	this.onChange = function(s) {
		_gthis.onChangeT(type,s);
		return;
	};
	this.onStart = function() {
		_gthis.onStartT(type);
		return;
	};
	this.inter = new h2d.Interactive(1,1,this);
	this.inter.onWheel = function(e) {
		return e.propagate = true;
	};
	this.inter.onPush = function(e1) {
		if(e1.button == 0) {
			if(hxd.Key.isDown(17)) {
				_gthis.ed.ed.clone(_gthis.ed.sprite,e1);
			} else {
				_gthis.start(e1,_gthis.inter);
			}
		} else {
			e1.propagate = true;
		}
		return;
	};
	this.inter.onClick = function(e2) {
		return e2.propagate = true;
	};
	this.inter.enableRightButton = true;
	this.resync(true);
};
cherry.plugins.atl.CornerEdit.__name__ = "cherry.plugins.atl.CornerEdit";
cherry.plugins.atl.CornerEdit.__super__ = cherry.plugins.atl.Dragable;
cherry.plugins.atl.CornerEdit.prototype = $extend(cherry.plugins.atl.Dragable.prototype,{
	onStartT: function(type) {
	}
	,onChangeT: function(type,stop) {
	}
	,resync: function(resize) {
		var _this = this.ed.ed;
		var scale = _this.zooms[_this.zoom];
		if(resize) {
			var sx = Math.min(scale,this.maxScale);
			this.inter.width = this.width * sx;
			this.inter.height = this.height * sx;
			if(this.centered) {
				var _this1 = this.inter;
				_this1.posChanged = true;
				_this1.x = this.width * sx * -.5;
				_this1.posChanged = true;
				_this1.y = this.height * sx * -.5;
			}
			var _this2 = this.cardinalOffset;
			_this2.x = this.width * sx * .5;
			_this2.y = this.height * sx * .5;
		}
		switch(this.type._hx_index) {
		case 0:case 4:
			this.posChanged = true;
			this.x = 0;
			this.posChanged = true;
			this.y = 0;
			break;
		case 1:
			this.posChanged = true;
			this.x = this.ed.sprite.width * scale;
			this.posChanged = true;
			this.y = 0;
			break;
		case 2:
			this.posChanged = true;
			this.x = 0;
			this.posChanged = true;
			this.y = this.ed.sprite.height * scale;
			break;
		case 3:
			this.posChanged = true;
			this.x = this.ed.sprite.width * scale;
			this.posChanged = true;
			this.y = this.ed.sprite.height * scale;
			break;
		case 5:
			this.posChanged = true;
			this.x = this.ed.sprite.width * .5 * scale;
			this.posChanged = true;
			this.y = 0;
			break;
		case 6:
			this.posChanged = true;
			this.x = 0;
			this.posChanged = true;
			this.y = this.ed.sprite.height * .5 * scale;
			break;
		case 7:
			this.posChanged = true;
			this.x = this.ed.sprite.width * scale;
			this.posChanged = true;
			this.y = this.ed.sprite.height * .5 * scale;
			break;
		case 8:
			this.posChanged = true;
			this.x = this.ed.sprite.width * .5 * scale;
			this.posChanged = true;
			this.y = this.ed.sprite.height * scale;
			break;
		}
	}
	,__class__: cherry.plugins.atl.CornerEdit
});
cherry.plugins.atl.CreateTool = $hxClasses["cherry.plugins.atl.CreateTool"] = function(ed,parent) {
	h2d.Object.call(this,parent);
	this.ed = ed;
	this.s = this.getScene();
	this.g = new h2d.Graphics(this);
	this.resize();
};
cherry.plugins.atl.CreateTool.__name__ = "cherry.plugins.atl.CreateTool";
cherry.plugins.atl.CreateTool.__super__ = h2d.Object;
cherry.plugins.atl.CreateTool.prototype = $extend(h2d.Object.prototype,{
	sync: function(ctx) {
		var v = this.s.get_mouseX();
		this.posChanged = true;
		this.x = v;
		var v1 = this.s.get_mouseY();
		this.posChanged = true;
		this.y = v1;
		h2d.Object.prototype.sync.call(this,ctx);
	}
	,resize: function() {
		this.g.beginFill(16711680);
		var w = this.s.width + 10;
		var h = this.s.height + 10;
		this.g.drawRect(-w,0,w * 2,1);
		this.g.drawRect(0,-h,1,h * 2);
		this.g.endFill();
	}
	,start: function(e) {
		this.s.startDrag($bind(this,this.event),null,e);
		this.b = new h2d.col.Bounds();
		this.pts = new h2d.col.Point(e.relX,e.relY);
		this.ed.tex.globalToLocal(this.pts);
		var _this = this.pts;
		this.end = new h2d.col.Point(_this.x,_this.y);
		var _this1 = this.b;
		var p = this.pts;
		if(p.x < _this1.xMin) {
			_this1.xMin = p.x;
		}
		if(p.x > _this1.xMax) {
			_this1.xMax = p.x;
		}
		if(p.y < _this1.yMin) {
			_this1.yMin = p.y;
		}
		if(p.y > _this1.yMax) {
			_this1.yMax = p.y;
		}
		this.disp = new h2d.Graphics(this.ed.tex);
		this.ed.toolAction = cherry.plugins.atl.CurrentAction.Create;
	}
	,event: function(e) {
		this.ed.tex.syncPos();
		var _this = this.end;
		_this.x = e.relX;
		_this.y = e.relY;
		this.ed.tex.globalToLocal(this.end);
		var _this1 = this.b;
		_this1.xMin = 1e20;
		_this1.yMin = 1e20;
		_this1.xMax = -1e20;
		_this1.yMax = -1e20;
		var _this2 = this.b;
		var p = this.pts;
		if(p.x < _this2.xMin) {
			_this2.xMin = p.x;
		}
		if(p.x > _this2.xMax) {
			_this2.xMax = p.x;
		}
		if(p.y < _this2.yMin) {
			_this2.yMin = p.y;
		}
		if(p.y > _this2.yMax) {
			_this2.yMax = p.y;
		}
		var _this3 = this.b;
		var p1 = this.end;
		if(p1.x < _this3.xMin) {
			_this3.xMin = p1.x;
		}
		if(p1.x > _this3.xMax) {
			_this3.xMax = p1.x;
		}
		if(p1.y < _this3.yMin) {
			_this3.yMin = p1.y;
		}
		if(p1.y > _this3.yMax) {
			_this3.yMax = p1.y;
		}
		var _this4 = this.b;
		var ix = Math.floor(_this4.xMin);
		var iy = Math.floor(_this4.yMin);
		var width = Math.ceil(_this4.xMax) - ix;
		var height = Math.ceil(_this4.yMax) - iy;
		var b = new h2d.col.IBounds();
		b.xMin = ix;
		b.yMin = iy;
		b.xMax = ix + width;
		b.yMax = iy + height;
		var ib = b;
		this.disp.clear();
		this.disp.beginFill(65280);
		this.disp.drawRect(ib.xMin - 1,ib.yMin - 1,ib.xMax - ib.xMin + 2,1);
		this.disp.drawRect(ib.xMin - 1,ib.yMin + (ib.yMax - ib.yMin),ib.xMax - ib.xMin + 2,1);
		this.disp.drawRect(ib.xMin - 1,ib.yMin,1,ib.yMax - ib.yMin + 1);
		this.disp.drawRect(ib.xMin + (ib.xMax - ib.xMin),ib.yMin,1,ib.yMax - ib.yMin);
		this.disp.endFill();
		if(e.kind == hxd.EventKind.ERelease || e.kind == hxd.EventKind.EReleaseOutside) {
			this.s.stopDrag();
			var _this5 = this.disp;
			if(_this5 != null && _this5.parent != null) {
				_this5.parent.removeChild(_this5);
			}
			this.disp = null;
			this.ed.toolAction = cherry.plugins.atl.CurrentAction.None;
			this.ed.createTile(ib);
		}
	}
	,__class__: cherry.plugins.atl.CreateTool
});
cherry.plugins.atl.SpriteEdit = $hxClasses["cherry.plugins.atl.SpriteEdit"] = function(ed,s,parent) {
	var _gthis = this;
	h2d.Object.call(this,parent);
	this.ed = ed;
	this.sprite = s;
	this.g = new h2d.Graphics(this);
	var out = new cherry.plugins.generic.shaders.OutlineShader();
	this.g.addShader(out);
	this.label = new h2d.Text(hxd.res.DefaultFont.get(),this);
	this.label.dropShadow = { dx : 1, dy : 1, alpha : 1, color : 0};
	this.drag = new cherry.plugins.atl.CornerEdit(this.sprite.width,this.sprite.height,cherry.plugins.atl.CornerType.Center,this);
	this.topLeft = new cherry.plugins.atl.CornerEdit(null,null,cherry.plugins.atl.CornerType.TopLeft,this);
	this.topRight = new cherry.plugins.atl.CornerEdit(null,null,cherry.plugins.atl.CornerType.TopRight,this);
	this.bottomLeft = new cherry.plugins.atl.CornerEdit(null,null,cherry.plugins.atl.CornerType.BottomLeft,this);
	this.bottomRight = new cherry.plugins.atl.CornerEdit(null,null,cherry.plugins.atl.CornerType.BottomRight,this);
	this.top = new cherry.plugins.atl.CornerEdit(4,4,cherry.plugins.atl.CornerType.Top,this);
	this.right = new cherry.plugins.atl.CornerEdit(4,4,cherry.plugins.atl.CornerType.Right,this);
	this.bottom = new cherry.plugins.atl.CornerEdit(4,4,cherry.plugins.atl.CornerType.Bottom,this);
	this.left = new cherry.plugins.atl.CornerEdit(4,4,cherry.plugins.atl.CornerType.Left,this);
	this.corners = [this.topLeft,this.topRight,this.bottomLeft,this.bottomRight,this.top,this.right,this.bottom,this.left];
	this.focusInter = new h2d.Interactive(this.sprite.width,this.sprite.height,this);
	this.focusInter.onWheel = function(e) {
		return e.propagate = true;
	};
	this.focusInter.onClick = function(e1) {
		if(e1.button == 0) {
			ed.focus(_gthis.sprite);
		} else {
			e1.propagate = true;
		}
		return;
	};
	this.focusInter.enableRightButton = true;
	this.b = new h2d.col.Bounds();
	this.dragCorner = new h2d.col.Point();
	this.resync(true);
	this.drag.onChangeT = $bind(this,this.dragCenter);
	this.drag.onStartT = $bind(this,this.dragStart);
	var _g = 0;
	var _g1 = this.corners;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		c.onStartT = $bind(this,this.dragStart);
		c.onChangeT = $bind(this,this.dragResize);
		c.maxScale = 4;
	}
};
cherry.plugins.atl.SpriteEdit.__name__ = "cherry.plugins.atl.SpriteEdit";
cherry.plugins.atl.SpriteEdit.__super__ = h2d.Object;
cherry.plugins.atl.SpriteEdit.prototype = $extend(h2d.Object.prototype,{
	set_focused: function(v) {
		this.focused = v;
		this.resync(true);
		return v;
	}
	,clampW: function(v) {
		var min = 0;
		var max = this.ed.tex.tile.width;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		if(v < min) {
			return min;
		} else if(v > max) {
			return max;
		} else {
			return v;
		}
	}
	,clampH: function(v) {
		var min = 0;
		var max = this.ed.tex.tile.height;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		if(v < min) {
			return min;
		} else if(v > max) {
			return max;
		} else {
			return v;
		}
	}
	,sync: function(ctx) {
		this.label.set_visible(hxd.Key.isDown(18));
		h2d.Object.prototype.sync.call(this,ctx);
	}
	,dragStart: function(type) {
		var x0 = this.sprite.x;
		var y0 = this.sprite.y;
		var width = this.sprite.width;
		var height = this.sprite.height;
		var b = new h2d.col.IBounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		this.old = b;
		var anch = new h2d.col.Point(this.sprite.x + this.sprite.width * .5,this.sprite.y + this.sprite.height * .5);
		this.ed.tex.localToGlobal(anch);
		var _g = 0;
		var _g1 = this.corners;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.type == type) {
				c.cardinalAnchor = anch;
				break;
			}
		}
		if(type == cherry.plugins.atl.CornerType.Center) {
			this.drag.cardinalAnchor = anch;
		}
		switch(type._hx_index) {
		case 0:
			var _this = this.dragCorner;
			_this.x = this.sprite.x + this.sprite.width;
			_this.y = this.sprite.y + this.sprite.height;
			break;
		case 1:
			var _this1 = this.dragCorner;
			_this1.x = this.sprite.x;
			_this1.y = this.sprite.y + this.sprite.height;
			break;
		case 2:
			var _this2 = this.dragCorner;
			_this2.x = this.sprite.x + this.sprite.width;
			_this2.y = this.sprite.y;
			break;
		case 3:
			var _this3 = this.dragCorner;
			_this3.x = this.sprite.x;
			_this3.y = this.sprite.y;
			break;
		case 4:
			break;
		case 5:
			var _this4 = this.dragCorner;
			_this4.x = this.sprite.x + this.sprite.width;
			_this4.y = this.sprite.y + this.sprite.height;
			break;
		case 6:
			var _this5 = this.dragCorner;
			_this5.x = this.sprite.x + this.sprite.width;
			_this5.y = this.sprite.y + this.sprite.height;
			break;
		case 7:
			var _this6 = this.dragCorner;
			_this6.x = this.sprite.x;
			_this6.y = this.sprite.y + this.sprite.height;
			break;
		case 8:
			var _this7 = this.dragCorner;
			_this7.x = this.sprite.x + this.sprite.width;
			_this7.y = this.sprite.y;
			break;
		}
	}
	,dragCenter: function(type,done) {
		var v = this.drag.pos.x;
		var min = 0;
		var max = this.ed.tex.tile.width;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		this.sprite.x = Math.floor(v < min ? min : v > max ? max : v);
		var v1 = this.drag.pos.y;
		var min1 = 0;
		var max1 = this.ed.tex.tile.height;
		if(max1 == null) {
			max1 = 1.;
		}
		if(min1 == null) {
			min1 = 0.;
		}
		this.sprite.y = Math.floor(v1 < min1 ? min1 : v1 > max1 ? max1 : v1);
		this.ed.resyncSprite();
		if(done) {
			this.resync(false);
			this.ed.sizeUndo(this.sprite,this.old);
		} else {
			this.redraw();
		}
	}
	,dragResize: function(type,done) {
		var _this = this.b;
		_this.xMin = 1e20;
		_this.yMin = 1e20;
		_this.xMax = -1e20;
		_this.yMax = -1e20;
		switch(type._hx_index) {
		case 0:
			var _this1 = this.b;
			var p = this.topLeft.pos;
			if(p.x < _this1.xMin) {
				_this1.xMin = p.x;
			}
			if(p.x > _this1.xMax) {
				_this1.xMax = p.x;
			}
			if(p.y < _this1.yMin) {
				_this1.yMin = p.y;
			}
			if(p.y > _this1.yMax) {
				_this1.yMax = p.y;
			}
			break;
		case 1:
			var _this2 = this.b;
			var p1 = this.topRight.pos;
			if(p1.x < _this2.xMin) {
				_this2.xMin = p1.x;
			}
			if(p1.x > _this2.xMax) {
				_this2.xMax = p1.x;
			}
			if(p1.y < _this2.yMin) {
				_this2.yMin = p1.y;
			}
			if(p1.y > _this2.yMax) {
				_this2.yMax = p1.y;
			}
			break;
		case 2:
			var _this3 = this.b;
			var p2 = this.bottomLeft.pos;
			if(p2.x < _this3.xMin) {
				_this3.xMin = p2.x;
			}
			if(p2.x > _this3.xMax) {
				_this3.xMax = p2.x;
			}
			if(p2.y < _this3.yMin) {
				_this3.yMin = p2.y;
			}
			if(p2.y > _this3.yMax) {
				_this3.yMax = p2.y;
			}
			break;
		case 3:
			var _this4 = this.b;
			var p3 = this.bottomRight.pos;
			if(p3.x < _this4.xMin) {
				_this4.xMin = p3.x;
			}
			if(p3.x > _this4.xMax) {
				_this4.xMax = p3.x;
			}
			if(p3.y < _this4.yMin) {
				_this4.yMin = p3.y;
			}
			if(p3.y > _this4.yMax) {
				_this4.yMax = p3.y;
			}
			break;
		case 4:
			break;
		case 5:
			var _this5 = this.b;
			var x = this.sprite.x;
			var y = this.top.pos.y;
			if(x < _this5.xMin) {
				_this5.xMin = x;
			}
			if(x > _this5.xMax) {
				_this5.xMax = x;
			}
			if(y < _this5.yMin) {
				_this5.yMin = y;
			}
			if(y > _this5.yMax) {
				_this5.yMax = y;
			}
			break;
		case 6:
			var _this6 = this.b;
			var x1 = this.left.pos.x;
			var y1 = this.sprite.y;
			if(x1 < _this6.xMin) {
				_this6.xMin = x1;
			}
			if(x1 > _this6.xMax) {
				_this6.xMax = x1;
			}
			if(y1 < _this6.yMin) {
				_this6.yMin = y1;
			}
			if(y1 > _this6.yMax) {
				_this6.yMax = y1;
			}
			break;
		case 7:
			var _this7 = this.b;
			var x2 = this.right.pos.x;
			var y2 = this.sprite.y;
			if(x2 < _this7.xMin) {
				_this7.xMin = x2;
			}
			if(x2 > _this7.xMax) {
				_this7.xMax = x2;
			}
			if(y2 < _this7.yMin) {
				_this7.yMin = y2;
			}
			if(y2 > _this7.yMax) {
				_this7.yMax = y2;
			}
			break;
		case 8:
			var _this8 = this.b;
			var x3 = this.sprite.x;
			var y3 = this.bottom.pos.y;
			if(x3 < _this8.xMin) {
				_this8.xMin = x3;
			}
			if(x3 > _this8.xMax) {
				_this8.xMax = x3;
			}
			if(y3 < _this8.yMin) {
				_this8.yMin = y3;
			}
			if(y3 > _this8.yMax) {
				_this8.yMax = y3;
			}
			break;
		}
		var _this9 = this.b;
		var p4 = this.dragCorner;
		if(p4.x < _this9.xMin) {
			_this9.xMin = p4.x;
		}
		if(p4.x > _this9.xMax) {
			_this9.xMax = p4.x;
		}
		if(p4.y < _this9.yMin) {
			_this9.yMin = p4.y;
		}
		if(p4.y > _this9.yMax) {
			_this9.yMax = p4.y;
		}
		var _this10 = this.b;
		var ix = Math.floor(_this10.xMin);
		var iy = Math.floor(_this10.yMin);
		var width = Math.ceil(_this10.xMax) - ix;
		var height = Math.ceil(_this10.yMax) - iy;
		var b = new h2d.col.IBounds();
		b.xMin = ix;
		b.yMin = iy;
		b.xMax = ix + width;
		b.yMax = iy + height;
		this.ib = b;
		this.sprite.x = this.ib.xMin;
		this.sprite.y = this.ib.yMin;
		var _this11 = this.ib;
		this.sprite.width = _this11.xMax - _this11.xMin;
		var _this12 = this.ib;
		this.sprite.height = _this12.yMax - _this12.yMin;
		this.ed.resyncSprite();
		var tmp = hxd.Key.isDown(16);
		if(done) {
			this.drag.width = this.sprite.width;
			this.drag.height = this.sprite.height;
			this.resync(true);
			this.ed.sizeUndo(this.sprite,this.old);
		} else {
			this.redraw();
		}
	}
	,redraw: function() {
		var _gthis = this;
		var _this = this.ed;
		var s = _this.zooms[_this.zoom];
		var pt = new h2d.col.Point(this.sprite.x,this.sprite.y);
		this.localToLocal(pt,this.ed.tex);
		var _this1 = this.label;
		_this1.posChanged = true;
		_this1.x = pt.x;
		var _this2 = this.label;
		_this2.posChanged = true;
		_this2.y = pt.y;
		this.g.clear();
		this.g.lineStyle(1,this.focused ? 16711680 : 13421772);
		this.g.beginFill(0,0);
		this.g.drawRect(pt.x - 0.5,pt.y - 0.5,this.sprite.width * s + 1,this.sprite.height * s + 1);
		this.g.endFill();
		if(this.focused) {
			var ms = Math.max(1,Math.min(s,this.topLeft.maxScale));
			var w = this.topLeft.width;
			var h = this.topLeft.height;
			this.g.lineStyle(1,15658734);
			this.g.beginFill(9211020,0.3);
			_gthis.g.drawRect(pt.x + 0 * s - w * .5 * ms,pt.y + 0 * s - h * .5 * ms,w * ms,h * ms);
			_gthis.g.drawRect(pt.x + this.sprite.width * s - w * .5 * ms,pt.y + 0 * s - h * .5 * ms,w * ms,h * ms);
			_gthis.g.drawRect(pt.x + 0 * s - w * .5 * ms,pt.y + this.sprite.height * s - h * .5 * ms,w * ms,h * ms);
			_gthis.g.drawRect(pt.x + this.sprite.width * s - w * .5 * ms,pt.y + this.sprite.height * s - h * .5 * ms,w * ms,h * ms);
			w = this.top.width;
			h = this.top.height;
			_gthis.g.drawRect(pt.x + this.sprite.width * .5 * s - w * .5 * ms,pt.y + 0 * s - h * .5 * ms,w * ms,h * ms);
			_gthis.g.drawRect(pt.x + this.sprite.width * .5 * s - w * .5 * ms,pt.y + this.sprite.height * s - h * .5 * ms,w * ms,h * ms);
			_gthis.g.drawRect(pt.x + 0 * s - w * .5 * ms,pt.y + this.sprite.height * .5 * s - h * .5 * ms,w * ms,h * ms);
			_gthis.g.drawRect(pt.x + this.sprite.width * s - w * .5 * ms,pt.y + this.sprite.height * .5 * s - h * .5 * ms,w * ms,h * ms);
		}
	}
	,localToLocal: function(pt,from) {
		from.localToGlobal(pt);
		this.globalToLocal(pt);
	}
	,resync: function(resized) {
		var _this = this.ed;
		var s = _this.zooms[_this.zoom];
		this.posChanged = true;
		this.x = this.ed.tex.absX + this.sprite.x * s;
		this.posChanged = true;
		this.y = this.ed.tex.absY + this.sprite.y * s;
		var _this1 = this.sprite;
		this.label.set_text(_this1.id + "#" + _this1.index);
		this.redraw();
		this.focusInter.set_visible(!this.focused);
		if(resized) {
			this.focusInter.width = this.sprite.width * s;
			this.focusInter.height = this.sprite.height * s;
		}
		var v = this.focused;
		this.drag.set_visible(v);
		this.drag.resync(resized);
		var _g = 0;
		var _g1 = this.corners;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_visible(v);
			c.resync(resized);
		}
	}
	,__class__: cherry.plugins.atl.SpriteEdit
	,__properties__: $extend(h2d.Object.prototype.__properties__,{set_focused:"set_focused"})
});
cherry.plugins.atl.CurrentAction = $hxEnums["cherry.plugins.atl.CurrentAction"] = { __ename__ : "cherry.plugins.atl.CurrentAction", __constructs__ : ["None","Create","Drag"]
	,None: {_hx_index:0,__enum__:"cherry.plugins.atl.CurrentAction",toString:$estr}
	,Create: {_hx_index:1,__enum__:"cherry.plugins.atl.CurrentAction",toString:$estr}
	,Drag: {_hx_index:2,__enum__:"cherry.plugins.atl.CurrentAction",toString:$estr}
};
cherry.plugins.atl.CurrentAction.__empty_constructs__ = [cherry.plugins.atl.CurrentAction.None,cherry.plugins.atl.CurrentAction.Create,cherry.plugins.atl.CurrentAction.Drag];
cherry.plugins.atl.CornerType = $hxEnums["cherry.plugins.atl.CornerType"] = { __ename__ : "cherry.plugins.atl.CornerType", __constructs__ : ["TopLeft","TopRight","BottomLeft","BottomRight","Center","Top","Left","Right","Bottom"]
	,TopLeft: {_hx_index:0,__enum__:"cherry.plugins.atl.CornerType",toString:$estr}
	,TopRight: {_hx_index:1,__enum__:"cherry.plugins.atl.CornerType",toString:$estr}
	,BottomLeft: {_hx_index:2,__enum__:"cherry.plugins.atl.CornerType",toString:$estr}
	,BottomRight: {_hx_index:3,__enum__:"cherry.plugins.atl.CornerType",toString:$estr}
	,Center: {_hx_index:4,__enum__:"cherry.plugins.atl.CornerType",toString:$estr}
	,Top: {_hx_index:5,__enum__:"cherry.plugins.atl.CornerType",toString:$estr}
	,Left: {_hx_index:6,__enum__:"cherry.plugins.atl.CornerType",toString:$estr}
	,Right: {_hx_index:7,__enum__:"cherry.plugins.atl.CornerType",toString:$estr}
	,Bottom: {_hx_index:8,__enum__:"cherry.plugins.atl.CornerType",toString:$estr}
};
cherry.plugins.atl.CornerType.__empty_constructs__ = [cherry.plugins.atl.CornerType.TopLeft,cherry.plugins.atl.CornerType.TopRight,cherry.plugins.atl.CornerType.BottomLeft,cherry.plugins.atl.CornerType.BottomRight,cherry.plugins.atl.CornerType.Center,cherry.plugins.atl.CornerType.Top,cherry.plugins.atl.CornerType.Left,cherry.plugins.atl.CornerType.Right,cherry.plugins.atl.CornerType.Bottom];
cherry.plugins.atl.DragRestrict = $hxEnums["cherry.plugins.atl.DragRestrict"] = { __ename__ : "cherry.plugins.atl.DragRestrict", __constructs__ : ["None","NoneSnap","NoneAngle","Diagonal","DiagonalSnap","Vertical","Horizontal"]
	,None: {_hx_index:0,__enum__:"cherry.plugins.atl.DragRestrict",toString:$estr}
	,NoneSnap: {_hx_index:1,__enum__:"cherry.plugins.atl.DragRestrict",toString:$estr}
	,NoneAngle: {_hx_index:2,__enum__:"cherry.plugins.atl.DragRestrict",toString:$estr}
	,Diagonal: {_hx_index:3,__enum__:"cherry.plugins.atl.DragRestrict",toString:$estr}
	,DiagonalSnap: {_hx_index:4,__enum__:"cherry.plugins.atl.DragRestrict",toString:$estr}
	,Vertical: {_hx_index:5,__enum__:"cherry.plugins.atl.DragRestrict",toString:$estr}
	,Horizontal: {_hx_index:6,__enum__:"cherry.plugins.atl.DragRestrict",toString:$estr}
};
cherry.plugins.atl.DragRestrict.__empty_constructs__ = [cherry.plugins.atl.DragRestrict.None,cherry.plugins.atl.DragRestrict.NoneSnap,cherry.plugins.atl.DragRestrict.NoneAngle,cherry.plugins.atl.DragRestrict.Diagonal,cherry.plugins.atl.DragRestrict.DiagonalSnap,cherry.plugins.atl.DragRestrict.Vertical,cherry.plugins.atl.DragRestrict.Horizontal];
if(!cherry.plugins.generic) cherry.plugins.generic = {};
if(!cherry.plugins.generic.shaders) cherry.plugins.generic.shaders = {};
cherry.plugins.generic.shaders.CheckerShader = $hxClasses["cherry.plugins.generic.shaders.CheckerShader"] = function(white,black) {
	this.whiteColor__ = new h3d.Vector();
	this.blackColor__ = new h3d.Vector();
	this.checkerSize__ = 8;
	hxsl.Shader.call(this);
	if(white != null) {
		this.whiteColor__ = white;
	} else {
		var _this = this.whiteColor__;
		_this.x = 0.2;
		_this.y = 0.2;
		_this.z = 0.2;
		_this.w = 1.;
	}
	if(black != null) {
		this.blackColor__ = black;
	} else {
		var _this1 = this.blackColor__;
		_this1.x = 0.066666666666666666;
		_this1.y = 0.066666666666666666;
		_this1.z = 0.066666666666666666;
		_this1.w = 1.;
	}
};
cherry.plugins.generic.shaders.CheckerShader.__name__ = "cherry.plugins.generic.shaders.CheckerShader";
cherry.plugins.generic.shaders.CheckerShader.__super__ = hxsl.Shader;
cherry.plugins.generic.shaders.CheckerShader.prototype = $extend(hxsl.Shader.prototype,{
	get_checkerSize: function() {
		return this.checkerSize__;
	}
	,set_checkerSize: function(_v) {
		return this.checkerSize__ = _v;
	}
	,get_blackColor: function() {
		return this.blackColor__;
	}
	,set_blackColor: function(_v) {
		return this.blackColor__ = _v;
	}
	,get_whiteColor: function() {
		return this.whiteColor__;
	}
	,set_whiteColor: function(_v) {
		return this.whiteColor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.checkerSize__;
		case 1:
			return this.blackColor__;
		case 2:
			return this.whiteColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.checkerSize__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(cherry.plugins.generic.shaders.CheckerShader.prototype);
		s.shader = this.shader;
		s.checkerSize__ = this.checkerSize__;
		s.blackColor__ = this.blackColor__;
		s.whiteColor__ = this.whiteColor__;
		return s;
	}
	,__class__: cherry.plugins.generic.shaders.CheckerShader
	,__properties__: {set_whiteColor:"set_whiteColor",get_whiteColor:"get_whiteColor",set_blackColor:"set_blackColor",get_blackColor:"get_blackColor",set_checkerSize:"set_checkerSize",get_checkerSize:"get_checkerSize"}
});
cherry.plugins.generic.shaders.OutlineShader = $hxClasses["cherry.plugins.generic.shaders.OutlineShader"] = function(white,black) {
	this.absolute__ = false;
	this.animate__ = true;
	this.whiteColor__ = new h3d.Vector();
	this.blackColor__ = new h3d.Vector();
	this.speed__ = 5;
	this.checkerSize__ = 6;
	this.outlineColor__ = new h3d.Vector();
	hxsl.Shader.call(this);
	var _this = this.outlineColor__;
	var x = 1;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	if(white != null) {
		this.whiteColor__ = white;
	} else {
		var _this1 = this.whiteColor__;
		var x1 = 1;
		var y1 = 1;
		var z1 = 1;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
		_this1.w = 1.;
	}
	if(black != null) {
		this.blackColor__ = black;
	} else {
		var _this2 = this.blackColor__;
		var x2 = 0;
		var y2 = 0;
		var z2 = 0;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = z2;
		_this2.w = 1.;
	}
};
cherry.plugins.generic.shaders.OutlineShader.__name__ = "cherry.plugins.generic.shaders.OutlineShader";
cherry.plugins.generic.shaders.OutlineShader.__super__ = hxsl.Shader;
cherry.plugins.generic.shaders.OutlineShader.prototype = $extend(hxsl.Shader.prototype,{
	get_outlineColor: function() {
		return this.outlineColor__;
	}
	,set_outlineColor: function(_v) {
		return this.outlineColor__ = _v;
	}
	,get_checkerSize: function() {
		return this.checkerSize__;
	}
	,set_checkerSize: function(_v) {
		return this.checkerSize__ = _v;
	}
	,get_speed: function() {
		return this.speed__;
	}
	,set_speed: function(_v) {
		return this.speed__ = _v;
	}
	,get_blackColor: function() {
		return this.blackColor__;
	}
	,set_blackColor: function(_v) {
		return this.blackColor__ = _v;
	}
	,get_whiteColor: function() {
		return this.whiteColor__;
	}
	,set_whiteColor: function(_v) {
		return this.whiteColor__ = _v;
	}
	,get_animate: function() {
		return this.animate__;
	}
	,set_animate: function(_v) {
		this.constModified = true;
		return this.animate__ = _v;
	}
	,get_absolute: function() {
		return this.absolute__;
	}
	,set_absolute: function(_v) {
		this.constModified = true;
		return this.absolute__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.animate__) {
			this.constBits |= 1;
		}
		if(this.absolute__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.outlineColor__;
		case 1:
			return this.checkerSize__;
		case 2:
			return this.speed__;
		case 3:
			return this.blackColor__;
		case 4:
			return this.whiteColor__;
		case 5:
			return this.animate__;
		case 6:
			return this.absolute__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.checkerSize__;
		case 2:
			return this.speed__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(cherry.plugins.generic.shaders.OutlineShader.prototype);
		s.shader = this.shader;
		s.outlineColor__ = this.outlineColor__;
		s.checkerSize__ = this.checkerSize__;
		s.speed__ = this.speed__;
		s.blackColor__ = this.blackColor__;
		s.whiteColor__ = this.whiteColor__;
		s.animate__ = this.animate__;
		s.absolute__ = this.absolute__;
		return s;
	}
	,__class__: cherry.plugins.generic.shaders.OutlineShader
	,__properties__: {set_absolute:"set_absolute",get_absolute:"get_absolute",set_animate:"set_animate",get_animate:"get_animate",set_whiteColor:"set_whiteColor",get_whiteColor:"get_whiteColor",set_blackColor:"set_blackColor",get_blackColor:"get_blackColor",set_speed:"set_speed",get_speed:"get_speed",set_checkerSize:"set_checkerSize",get_checkerSize:"get_checkerSize",set_outlineColor:"set_outlineColor",get_outlineColor:"get_outlineColor"}
});
Math.__name__ = "Math";
var js = js || {};
if(!js.node) js.node = {};
js.node.ChildProcess = require("child_process");
js.node.Fs = require("fs");
js.node.Path = require("path");
js.node.Zlib = require("zlib");
if(!js.node.buffer) js.node.buffer = {};
js.node.buffer.Buffer = require("buffer").Buffer;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
AtlasEditor._ = hide.view.FileTree.registerExtension(AtlasEditor,["atl"],{ icon : "image", createNew : "Atlas"});
AtlasEditor.__ = (function($this) {
	var $r;
	var css = window.document.createElement("style");
	css.textContent = ".tile-preview {\r\n  display: inline-block;\r\n  image-rendering: -webkit-optimize-contrast;\r\n}\r\n\r\n.tile-preview.mag {\r\n  image-rendering: pixelated;\r\n}\r\n\r\n.anim-info dd.selectable {\r\n  padding-bottom: 4px;\r\n}\r\n.anim-info dd.selectable.selected {\r\n  padding-bottom: 3px;\r\n  border-bottom: 1px solid #cccccc;\r\n}\r\n.anim-info .btn {\r\n  width: 20px;\r\n  margin-right: 2px;\r\n  padding-left: 6px;\r\n}\r\n\r\n.anim-info .info {\r\n  width: initial;\r\n  font-size: 7pt;\r\n}\r\n\r\ndd.vec2>input {\r\n  width: 65px;\r\n}\r\ndd.vec2>input:last-child {\r\n  width: 66px;\r\n}\r\ndd.vec2>span {\r\n  text-align: right;\r\n}";
	window.document.head.appendChild(css);
	$r = true;
	return $r;
}(this));
cherry.plugins.atl.Dragable.PI2 = Math.PI * .5;
cherry.plugins.atl.Dragable.PI4 = Math.PI / 4;
cherry.plugins.atl.Dragable.PI8 = Math.PI / 8;
cherry.plugins.atl.Dragable.CARDINALS = [cherry.plugins.atl.Dragable.PI8,cherry.plugins.atl.Dragable.PI4 + cherry.plugins.atl.Dragable.PI8,cherry.plugins.atl.Dragable.PI2 + cherry.plugins.atl.Dragable.PI8,cherry.plugins.atl.Dragable.PI2 + cherry.plugins.atl.Dragable.PI4 + cherry.plugins.atl.Dragable.PI8];
cherry.plugins.atl.Dragable.DEF_DIAGONALS = [cherry.plugins.atl.Dragable.PI4,cherry.plugins.atl.Dragable.PI4 + cherry.plugins.atl.Dragable.PI2];
cherry.plugins.generic.shaders.CheckerShader.SRC = "HXSLLGNoZXJyeS5wbHVnaW5zLmdlbmVyaWMuc2hhZGVycy5DaGVja2VyU2hhZGVyBgELY2hlY2tlclNpemUDAgAAAgpibGFja0NvbG9yBQwCAAADCndoaXRlQ29sb3IFDAIAAAQKcGl4ZWxDb2xvcgUMBAAABQxjYWxjdWxhdGVkVVYFCgMAAAYIZnJhZ21lbnQOBgAAAQEGAAAFBAgHBHR2ZWMFCgQAAAYCAgUFCgIBAwUKAAgIBWJsYWNrAgQAAAYJBAYTCgIHBQoAAAMBAwAAAAAAAABAAwMDAQMAAAAAAADwPwMCAAsGCQQGEwoCBwUKBAADAQMAAAAAAAAAQAMDAwEDAAAAAAAA8D8DAgYEAggCBwICCAICAgAACwIIAgUCBgQKAgQFDJIABQsKAgIFDJIABQsFCwaBCgIEBQwMAAMKAgIFDAwAAwMABQIGBAoCBAUMkgAFCwoCAwUMkgAFCwULBoEKAgQFDAwAAwoCAwUMDAADAwAAAA";
cherry.plugins.generic.shaders.OutlineShader.SRC = "HXSLLGNoZXJyeS5wbHVnaW5zLmdlbmVyaWMuc2hhZGVycy5PdXRsaW5lU2hhZGVyDAEEdGltZQMAAAACDG91dGxpbmVDb2xvcgUMAgAAAwtjaGVja2VyU2l6ZQMCAAAEBXNwZWVkAwIAAAUKYmxhY2tDb2xvcgUMAgAABgp3aGl0ZUNvbG9yBQwCAAAHB2FuaW1hdGUCAgABAAAAAAAICGFic29sdXRlAgIAAQAAAAAACQpwaXhlbENvbG9yBQwEAAAKEGFic29sdXRlUG9zaXRpb24FDAQAAAsOc3ByaXRlUG9zaXRpb24FDAQAAAwIZnJhZ21lbnQOBgAAAQEMAAAFAQsGDgYOBgUKAgkFDAAAAwoCAgUMAAADAgYFCgIJBQwEAAMKAgIFDAQAAwICBgUKAgkFDAgAAwoCAgUMCAADAgIFAggNBHR2ZWMFCgQAAAYCBAYDBAsCCAIKAgoFDBEABQoKAgsFDBEABQoFCgUKBAsCBwIGAQIBAwIEAwMBAwAAAAAAAAAAAwMDBQoFCgkDKA4CAgMDAgMDBQoFCgALBgkEBhMEBgAKAg0FCgAAAwoCDQUKBAADAwMBAwAAAAAAAABAAwMDAQMAAAAAAADwPwMCBQIGBAoCCQUMkgAFCwoCBQUMkgAFCwULBoEKAgkFDAwAAwoCBQUMDAADAwAFAgYECgIJBQySAAULCgIGBQySAAULBQsGgQoCCQUMDAADCgIGBQwMAAMDAAAAAAAA";

//# sourceMappingURL=atlasser-plug.js.map